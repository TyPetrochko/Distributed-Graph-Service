#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:twisted
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Goodbyez:
  """
  Attributes:
   - val
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'val', None, 325, ), # 1
  )

  def __init__(self, val=thrift_spec[1][4],):
    self.val = val

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.val = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Goodbyez')
    if self.val is not None:
      oprot.writeFieldBegin('val', TType.I32, 1)
      oprot.writeI32(self.val)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.val)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BoolPasser:
  """
  Attributes:
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'value', None, True, ), # 1
  )

  def __init__(self, value=thrift_spec[1][4],):
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.value = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BoolPasser')
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.BOOL, 1)
      oprot.writeBool(self.value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.value)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Hello:
  """
  Attributes:
   - simple
   - complex
   - complexer
   - words
   - thinz
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'simple', None, 53, ), # 1
    (2, TType.MAP, 'complex', (TType.I32,None,TType.I32,None), {
      23 : 532,
      6243 : 632,
      2355 : 532,
    }, ), # 2
    (3, TType.MAP, 'complexer', (TType.I32,None,TType.MAP,(TType.I32,None,TType.I32,None)), None, ), # 3
    (4, TType.STRING, 'words', None, "words", ), # 4
    (5, TType.STRUCT, 'thinz', (Goodbyez, Goodbyez.thrift_spec), Goodbyez(**{
      "val" : 36632,
    }), ), # 5
  )

  def __init__(self, simple=thrift_spec[1][4], complex=thrift_spec[2][4], complexer=None, words=thrift_spec[4][4], thinz=thrift_spec[5][4],):
    self.simple = simple
    if complex is self.thrift_spec[2][4]:
      complex = {
      23 : 532,
      6243 : 632,
      2355 : 532,
    }
    self.complex = complex
    self.complexer = complexer
    self.words = words
    if thinz is self.thrift_spec[5][4]:
      thinz = Goodbyez(**{
      "val" : 36632,
    })
    self.thinz = thinz

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.simple = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.complex = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readI32()
            _val6 = iprot.readI32()
            self.complex[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.complexer = {}
          (_ktype8, _vtype9, _size7 ) = iprot.readMapBegin()
          for _i11 in xrange(_size7):
            _key12 = iprot.readI32()
            _val13 = {}
            (_ktype15, _vtype16, _size14 ) = iprot.readMapBegin()
            for _i18 in xrange(_size14):
              _key19 = iprot.readI32()
              _val20 = iprot.readI32()
              _val13[_key19] = _val20
            iprot.readMapEnd()
            self.complexer[_key12] = _val13
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.words = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.thinz = Goodbyez()
          self.thinz.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Hello')
    if self.simple is not None:
      oprot.writeFieldBegin('simple', TType.I32, 1)
      oprot.writeI32(self.simple)
      oprot.writeFieldEnd()
    if self.complex is not None:
      oprot.writeFieldBegin('complex', TType.MAP, 2)
      oprot.writeMapBegin(TType.I32, TType.I32, len(self.complex))
      for kiter21,viter22 in self.complex.items():
        oprot.writeI32(kiter21)
        oprot.writeI32(viter22)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.complexer is not None:
      oprot.writeFieldBegin('complexer', TType.MAP, 3)
      oprot.writeMapBegin(TType.I32, TType.MAP, len(self.complexer))
      for kiter23,viter24 in self.complexer.items():
        oprot.writeI32(kiter23)
        oprot.writeMapBegin(TType.I32, TType.I32, len(viter24))
        for kiter25,viter26 in viter24.items():
          oprot.writeI32(kiter25)
          oprot.writeI32(viter26)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.words is not None:
      oprot.writeFieldBegin('words', TType.STRING, 4)
      oprot.writeString(self.words)
      oprot.writeFieldEnd()
    if self.thinz is not None:
      oprot.writeFieldBegin('thinz', TType.STRUCT, 5)
      self.thinz.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.simple)
    value = (value * 31) ^ hash(self.complex)
    value = (value * 31) ^ hash(self.complexer)
    value = (value * 31) ^ hash(self.words)
    value = (value * 31) ^ hash(self.thinz)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Goodbye(TException):
  """
  Attributes:
   - simple
   - complex
   - complexer
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'simple', None, None, ), # 1
    (2, TType.MAP, 'complex', (TType.I32,None,TType.I32,None), None, ), # 2
    (3, TType.MAP, 'complexer', (TType.I32,None,TType.MAP,(TType.I32,None,TType.I32,None)), None, ), # 3
  )

  def __init__(self, simple=None, complex=None, complexer=None,):
    self.simple = simple
    self.complex = complex
    self.complexer = complexer

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.simple = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.complex = {}
          (_ktype28, _vtype29, _size27 ) = iprot.readMapBegin()
          for _i31 in xrange(_size27):
            _key32 = iprot.readI32()
            _val33 = iprot.readI32()
            self.complex[_key32] = _val33
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.complexer = {}
          (_ktype35, _vtype36, _size34 ) = iprot.readMapBegin()
          for _i38 in xrange(_size34):
            _key39 = iprot.readI32()
            _val40 = {}
            (_ktype42, _vtype43, _size41 ) = iprot.readMapBegin()
            for _i45 in xrange(_size41):
              _key46 = iprot.readI32()
              _val47 = iprot.readI32()
              _val40[_key46] = _val47
            iprot.readMapEnd()
            self.complexer[_key39] = _val40
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Goodbye')
    if self.simple is not None:
      oprot.writeFieldBegin('simple', TType.I32, 1)
      oprot.writeI32(self.simple)
      oprot.writeFieldEnd()
    if self.complex is not None:
      oprot.writeFieldBegin('complex', TType.MAP, 2)
      oprot.writeMapBegin(TType.I32, TType.I32, len(self.complex))
      for kiter48,viter49 in self.complex.items():
        oprot.writeI32(kiter48)
        oprot.writeI32(viter49)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.complexer is not None:
      oprot.writeFieldBegin('complexer', TType.MAP, 3)
      oprot.writeMapBegin(TType.I32, TType.MAP, len(self.complexer))
      for kiter50,viter51 in self.complexer.items():
        oprot.writeI32(kiter50)
        oprot.writeMapBegin(TType.I32, TType.I32, len(viter51))
        for kiter52,viter53 in viter51.items():
          oprot.writeI32(kiter52)
          oprot.writeI32(viter53)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.simple)
    value = (value * 31) ^ hash(self.complex)
    value = (value * 31) ^ hash(self.complexer)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
