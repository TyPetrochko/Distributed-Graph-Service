/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "rpc_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace rpc {

int _kOperationValues[] = {
  Operation::ADD_NODE,
  Operation::ADD_EDGE,
  Operation::REMOVE_NODE,
  Operation::REMOVE_EDGE,
  Operation::LOCK,
  Operation::UNLOCK
};
const char* _kOperationNames[] = {
  "ADD_NODE",
  "ADD_EDGE",
  "REMOVE_NODE",
  "REMOVE_EDGE",
  "LOCK",
  "UNLOCK"
};
const std::map<int, const char*> _Operation_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kOperationValues, _kOperationNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


Packet::~Packet() throw() {
}


void Packet::__set_op(const Operation::type val) {
  this->op = val;
}

void Packet::__set_node_a(const int64_t val) {
  this->node_a = val;
}

void Packet::__set_node_b(const int64_t val) {
  this->node_b = val;
}

uint32_t Packet::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->op = (Operation::type)ecast0;
          this->__isset.op = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->node_a);
          this->__isset.node_a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->node_b);
          this->__isset.node_b = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Packet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Packet");

  xfer += oprot->writeFieldBegin("op", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->op);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("node_a", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->node_a);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("node_b", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->node_b);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Packet &a, Packet &b) {
  using ::std::swap;
  swap(a.op, b.op);
  swap(a.node_a, b.node_a);
  swap(a.node_b, b.node_b);
  swap(a.__isset, b.__isset);
}

Packet::Packet(const Packet& other1) {
  op = other1.op;
  node_a = other1.node_a;
  node_b = other1.node_b;
  __isset = other1.__isset;
}
Packet& Packet::operator=(const Packet& other2) {
  op = other2.op;
  node_a = other2.node_a;
  node_b = other2.node_b;
  __isset = other2.__isset;
  return *this;
}
void Packet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Packet(";
  out << "op=" << to_string(op);
  out << ", " << "node_a=" << to_string(node_a);
  out << ", " << "node_b=" << to_string(node_b);
  out << ")";
}

} // namespace
