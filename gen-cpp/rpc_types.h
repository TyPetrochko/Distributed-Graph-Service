/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef rpc_TYPES_H
#define rpc_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace rpc {

struct Operation {
  enum type {
    ADD_NODE = 0,
    ADD_EDGE = 1,
    REMOVE_NODE = 2,
    REMOVE_EDGE = 3,
    LOCK = 4,
    UNLOCK = 5
  };
};

extern const std::map<int, const char*> _Operation_VALUES_TO_NAMES;

class Packet;

typedef struct _Packet__isset {
  _Packet__isset() : op(false), node_a(false), node_b(false) {}
  bool op :1;
  bool node_a :1;
  bool node_b :1;
} _Packet__isset;

class Packet {
 public:

  Packet(const Packet&);
  Packet& operator=(const Packet&);
  Packet() : op((Operation::type)0), node_a(0), node_b(0) {
  }

  virtual ~Packet() throw();
  Operation::type op;
  int64_t node_a;
  int64_t node_b;

  _Packet__isset __isset;

  void __set_op(const Operation::type val);

  void __set_node_a(const int64_t val);

  void __set_node_b(const int64_t val);

  bool operator == (const Packet & rhs) const
  {
    if (!(op == rhs.op))
      return false;
    if (!(node_a == rhs.node_a))
      return false;
    if (!(node_b == rhs.node_b))
      return false;
    return true;
  }
  bool operator != (const Packet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Packet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Packet &a, Packet &b);

inline std::ostream& operator<<(std::ostream& out, const Packet& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
