// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

/*#include "GraphEdit.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::rpc;

class GraphEditHandler : virtual public GraphEditIf {
 public:
  GraphEditHandler() {
    // Your initialization goes here
  }

  bool editGraph(const Packet& p) {
    // Your implementation goes here
    switch(p.op) {
      case Operation::ADD_NODE:
        add_node(p.node_a);
        break;
      case Operation::ADD_EDGE:
        add_edge(p.node_a, p.node_b);
        break;
      case Operation::REMOVE_NODE:
        remove_add(p.node_a);
        break;
      case Operation::REMOVE_EDGE:
        remove_edge(p.node_a, p.node_b);
        break;
      default:
        break;
    }
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<GraphEditHandler> handler(new GraphEditHandler());
  shared_ptr<TProcessor> processor(new GraphEditProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

*/